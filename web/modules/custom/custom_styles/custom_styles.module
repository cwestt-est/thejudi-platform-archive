<?php

/**
 * @file
 * Custom module for theme and style customizations.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function custom_styles_preprocess_page(&$variables) {
  // Add custom CSS file to the page.
  $variables['#attached']['library'][] = 'custom_styles/custom-styles';
}

/**
 * Implements hook_theme().
 */
function custom_styles_theme($existing, $type, $theme, $path) {
  return [
    'gantt_page' => [
      'template' => 'gantt-page',
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_toolbar().
 */
function custom_styles_toolbar() {
  $items = [];
  $menu_tree = \Drupal::menuTree();
  $menu_name = 'main';

  // Load the menu tree for the main menu.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $parameters->setMaxDepth(2); // Load 2 levels to get parent and children
  $parameters->onlyEnabledLinks();

  $tree = $menu_tree->load($menu_name, $parameters);

  // Get the default tree manipulators.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  $tree = $menu_tree->transform($tree, $manipulators);

  // Iterate through the menu tree and create a toolbar item for each link.
  foreach ($tree as $key => $element) {
    // Ensure the current user has access to the menu item.
    if (!$element->access->isAllowed()) {
      continue;
    }
    $link = $element->link;

    // Create a unique machine name for each toolbar item.
    $item_key = 'custom_styles_main_menu_' . str_replace([':', '.', '-'], '_', $key);

    // Build link classes.
    $link_classes = ['toolbar-item'];
    
    // Dynamically add the 'is-active' class for the current page.
    if ($element->inActiveTrail) {
      $link_classes[] = 'is-active';
    }
    
    $items[$item_key] = [
      '#type' => 'toolbar_item',
      '#weight' => $link->getWeight(),
      'tab' => [
        '#type' => 'link',
        '#title' => $link->getTitle(),
        '#url' => $link->getUrlObject(),
        '#options' => [
          'attributes' => [
            'class' => $link_classes,
          ],
        ],
      ],
    ];

    // If there are sub-menu items, build them properly using the menu tree service.
    if ($element->hasChildren && !empty($element->subtree)) {
      // Build the submenu using Drupal's menu tree builder.
      $submenu_build = $menu_tree->build($element->subtree);
      
      // Add the tray with the built submenu.
      $items[$item_key]['tray'] = [
        '#heading' => t('@title sub-menu', ['@title' => $link->getTitle()]),
        'toolbar_menu' => $submenu_build,
      ];
    }
  }

  // Attach the custom library to the last generated item, if any items were created.
  if (!empty($items)) {
    $last_key = array_key_last($items);
    $items[$last_key]['#attached']['library'][] = 'custom_styles/gin-toolbar-override';
  }

  return $items;
}

/**
 * Implements hook_preprocess_html().
 */
function custom_styles_preprocess_html(&$variables) {
  $user = \Drupal::currentUser();
  $roles = $user->getRoles();

  // Add each role as a body class.
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role--' . str_replace('_', '-', $role);
  }

  // Check if user is an administrator OR the root admin (uid 1).
  if (in_array('administrator', $roles) || $user->id() == 1) {
    $variables['attributes']['class'][] = 'user-is-admin';
    $variables['is_admin'] = TRUE;

    // If the user is specifically the root admin, add that class too.
    if ($user->id() == 1) {
      $variables['attributes']['class'][] = 'user-is-root-admin';
      $variables['is_root_admin'] = TRUE;
    }
  }
  else {
    $variables['attributes']['class'][] = 'user-not-admin';
    $variables['is_admin'] = FALSE;
  }

  // Optional: Add a class for the primary role (highest weight).
  if (!empty($roles)) {
    // The primary role might not be the first one in the list depending on site config.
    // This will add a class for the first role returned by getRoles().
    $variables['attributes']['class'][] = 'user-role-' . str_replace('_', '-', reset($roles));
  }
}
